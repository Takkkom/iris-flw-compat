plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "irisflw.mixins.flw.json"
        mixinConfig "irisflw.mixins.iris.json"
        mixinConfig "irisflw.mixins.forge.json"
    }
    runs {
        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    modCompileOnly (include("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_forge_version}"))

    modLocalRuntime ("maven.modrinth:rubidium:${rubidium_version}")
    modLocalRuntime ("maven.modrinth:oculus:${oculus_version}")
    forgeRuntimeLibrary ('io.github.douira:glsl-transformer:2.0.0-pre14')
    forgeRuntimeLibrary ('org.anarres:jcpp:1.4.14')
}

processResources {
    inputs.property 'version', mod_version

    filesMatching('META-INF/mods.toml') {
        expand version: mod_version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
